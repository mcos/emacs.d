# -*- mode: snippet -*-
# name: collection
# key: coll
# contributor : @mcos
# --

// $1Collection provides a concurrent-safe collection of $1.
type $1Collection struct {
    collection []$1
    mu sync.Mutex
}


// Add adds a bunch of $1 to the collection.
// Note: This is a concurrent-safe implementation, so any other goroutines that try to write during this operation
// will be blocked.
func (c *$1Collection) Add(ts ...$1) {
    c.mu.Lock()
    defer c.mu.Unlock()

    if ts == nil {
        return
    }

    c.collection = append(c.collection, ts...)
}

// All retrieves the collection of $1 from the underlying collection.
// Note: This is a concurrent-safe implementation, so the state of the collection at the calltime will be returned, even if
// any other goroutines tries to add to the collection at that time.
func (c *$1Collection) All() []$1 {
    c.mu.Lock()
    defer c.mu.Unlock()

    return c.collection
}

// Each calls the supplied function for every $1 in the collection. The first error encountered will be returned.
// Note: This is a concurrent-safe implementation, so any other goroutines that try to write during this operation
// will be blocked.
func (c *$1Collection) Each(f func($1) error) error {
    c.mu.Lock()
    defer c.mu.Unlock()

    for _, t := range c.collection {
    	err := f(t)
	if err != nil {
	   return err
	}
    }

    return nil
}

